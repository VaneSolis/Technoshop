{"version":3,"file":"index.esm-Di5Nvi7D.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange: (event) => _registerProps.current.onChange({\n            target: {\n                value: getEventValue(event),\n                name: name,\n            },\n            type: EVENTS.CHANGE,\n        }),\n        onBlur: () => _registerProps.current.onBlur({\n            target: {\n                value: get(control._formValues, name),\n                name: name,\n            },\n            type: EVENTS.BLUR,\n        }),\n        ref: (elm) => {\n            const field = get(control._fields, name);\n            if (field && elm) {\n                field._f.ref = {\n                    focus: () => elm.focus(),\n                    select: () => elm.select(),\n                    setCustomValidity: (message) => elm.setCustomValidity(message),\n                    reportValidity: () => elm.reportValidity(),\n                };\n            }\n        },\n    }), [\n        name,\n        control._formValues,\n        disabled,\n        formState.disabled,\n        value,\n        control._fields,\n    ]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (_options.mode === 'onBlur' && isBlurEvent) {\n                        _updateValid();\n                    }\n                    else if (!isBlurEvent) {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n            updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields, name)._f), false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isPlainObject","key","compact","filter","Boolean","isUndefined","val","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","React","createContext","isEmptyObject","Object","keys","convertToArrayPayload","isString","appendErrors","name","validateAllFieldCriteria","errors","message","__spreadProps","__spreadValues","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","_names","isBlurEvent","watchAll","watch","has","some","watchName","startsWith","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_a","_f","currentField","__objRest","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","checked","disabled","map","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","disabledFieldNames","formValues","shouldUseNativeValidation","isFieldArray","__async","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","next","observer","subscribe","push","unsubscribe","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getRuleValue","rule","source","ASYNC_FUNCTION","schemaErrorLookup","_fields","names","fieldName","join","foundError","pop","defaultOptions","reValidateMode","shouldFocusError","createFormControl","props","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitted","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","_defaultValues","_formValues","shouldUnregister","_state","unMount","array","timer","_proxyFormState","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","criteriaMode","_updateValid","shouldUpdateValid","this","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","_0","_1","_2","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldReference","find","validateFunction","fieldError","getValues","_getWatch","isGlobal","add","generateWatchOutput","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","onChange","event","target","isFieldValueUpdated","getCurrentFieldValue","getEventValue","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","isTouched","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","Promise","all","shouldFocus","getFieldState","formState","invalid","setError","currentRef","restOfErrorTree","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","substring","search","getNodeParentName","isNameInFieldArray","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","control","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","unsetEmptyArray","_getFieldArray","_resetDefaultValues","then","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","useForm","_formControl","useRef","_values","updateFormState","useState","current","_props","useEffect","subscription","subject","useSubscribe","formStateData","shouldRenderFormState","localProxyFormState","isRoot","defineProperty","_key","getProxyFormState"],"mappings":"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","x_google_ignoreList":[0]}